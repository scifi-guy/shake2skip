/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c MafwRendererProxy -p mafwrendererproxy.h:mafwrendererproxy.cpp com.nokia.mafw.renderer.xml com.nokia.mafw.renderer
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MAFWRENDERERPROXY_H_1311831553
#define MAFWRENDERERPROXY_H_1311831553

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.nokia.mafw.renderer
 */
class MafwRendererProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.nokia.mafw.renderer"; }

public:
    MafwRendererProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~MafwRendererProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> assign_playlist(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id);
        return asyncCallWithArgumentList(QLatin1String("assign_playlist"), argumentList);
    }

    inline QDBusPendingReply<> get_current_media_info(const QString &metadataKey)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(metadataKey);
        return asyncCallWithArgumentList(QLatin1String("get_current_media_info"), argumentList);
    }

    inline QDBusPendingReply<> get_position()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("get_position"), argumentList);
    }

    inline QDBusPendingReply<> get_status()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("get_status"), argumentList);
    }

    inline QDBusPendingReply<> goto_index(uint index)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(index);
        return asyncCallWithArgumentList(QLatin1String("goto_index"), argumentList);
    }

    inline QDBusPendingReply<> next()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("next"), argumentList);
    }

    inline QDBusPendingReply<> pause()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("pause"), argumentList);
    }

    inline QDBusPendingReply<> pause_at(uint position)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(position);
        return asyncCallWithArgumentList(QLatin1String("pause_at"), argumentList);
    }

    inline QDBusPendingReply<> play()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("play"), argumentList);
    }

    inline QDBusPendingReply<> play_uri(const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url);
        return asyncCallWithArgumentList(QLatin1String("play_uri"), argumentList);
    }

    inline QDBusPendingReply<> play_uri(const QString &url, uint startPos)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url) << qVariantFromValue(startPos);
        return asyncCallWithArgumentList(QLatin1String("play_uri"), argumentList);
    }

    inline QDBusPendingReply<> play_uri_content_type(const QString &url, const QString &contentType)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url) << qVariantFromValue(contentType);
        return asyncCallWithArgumentList(QLatin1String("play_uri_content_type"), argumentList);
    }

    inline QDBusPendingReply<> previous()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("previous"), argumentList);
    }

    inline QDBusPendingReply<> resume()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("resume"), argumentList);
    }

    inline QDBusPendingReply<> set_position(int seconds)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(seconds);
        return asyncCallWithArgumentList(QLatin1String("set_position"), argumentList);
    }

    inline QDBusPendingReply<> set_position(int seconds, int mode)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(seconds) << qVariantFromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("set_position"), argumentList);
    }

    inline QDBusPendingReply<> stop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stop"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void buffering_info(double status);
    void error(int code, const QString &message);
    void media_changed(int index, const QString &objectId);
    void metadata_changed(const QString &key, const QVariantList &values);
    void playback_completed();
    void playlist_changed(const QString &playlistId);
    void scanning_info(double status);
    void state_changed(int state);
};

namespace com {
  namespace nokia {
    namespace mafw {
      typedef ::MafwRendererProxy renderer;
    }
  }
}
#endif
